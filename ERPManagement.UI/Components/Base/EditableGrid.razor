@typeparam TItem
@inject IStringLocalizer<DataGrid<TItem>> glocalizer

    @if (isQMBModelVisible)
{
    <ModalDialog DialogType="@ModalDialog.ModalDialogType.DeleteCancel" Text="@QMBMessage" Title="@QMBTitle" OnClose="ConfirmAction"></ModalDialog>
}
<div class="table-responsive">
    <table class=@GlobalVariables.TableClass style="padding:0">
        <thead>
            <tr class="fw-light ">
                <th class=@GlobalVariables.TableHeaderClass>#</th>
                @foreach (var property in typeof(TItem).GetProperties())
                {
                    if (!InvisibleColumns.Contains(property.Name))
                    {
                        <th class=@GlobalVariables.TableHeaderClass>@localizer[property.Name]</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @{
                int counter = (currentPage - 1) * itemsPerPage;
            }
            @foreach (var item in Items.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage))

            {
                <tr @onclick="() => SelectItem(item)" >
                    @{
                        ++counter;
                    }
                    <td class=@GlobalVariables.TableCellDataClass width="5%" style="word-break:break-word;">@counter</td>
                    @foreach (var property in typeof(TItem).GetProperties())
                    {

                        if (!InvisibleColumns.Contains(property.Name))
                        {
                            if (valueLists.ContainsKey(property.Name))
                            {
                                @* if (int.Parse(property.GetValue(item).ToString()) != 0)
                                { *@
                                <td class=@GlobalVariables.TableCellDataClass width="@(ColWidth==null ? 0 : ColWidth[property.Name]+"%")" style="word-break:break-word;">
                                    @* @valueLists[property.Name][property.GetValue(item).ToString()] *@
                                    @{
                                        Dictionary<string, string> lst = valueLists[property.Name];
                                        if (lstFilters!= null && lstFilters.ContainsKey(property.Name) && int.Parse(globalFunctions.GetPropertyValue(item, lstFilters[property.Name])) != 0)
                                        {
                                            lst = dts.Tables[property.Name].Select(lstFilters[property.Name] + "=" + globalFunctions.GetPropertyValue(item, lstFilters[property.Name])).ToDictionary(row => (string)row[property.Name].ToString(), row => (string)row[dts.Tables[property.Name].Prefix]);
                                        }
                                            //property.GetValue(Model)?.ToString(),
                                         }
                                    <select class="form-select text-center" aria-labelledby="@property.Name" value="@property.GetValue(item)?.ToString()" @oninput="@(e => CellListChanged(property, e.Value.ToString(),item))">
                                            <option value="" selected hidden></option> 
                                            @foreach (var itm in lst)
                                            {
                                                 <option value="@itm.Key"> @itm.Value</option>
                                            }
                                        </select>
                                    </td>
                                @* }
                                else
                                {

                                    <td> </td>
                                } *@

                            }
                            else
                            {
                                if (property.PropertyType == typeof(int) || property.PropertyType == typeof(int?) )
                                {
                                    <td class=@GlobalVariables.TableCellDataClass width="@(ColWidth==null ? 0 : ColWidth[property.Name]+"%")" style="word-break:break-word;">
                                        <input class="@GlobalVariables.NumberClass" aria-labelledby="@property.Name" type="number" value="@property.GetValue(item)?.ToString()"  @oninput="@(e => UpdateModel(property, e.Value,item))" />
                                    </td>
                                }
                                if ( property.PropertyType == typeof(decimal) || property.PropertyType == typeof(decimal?))
                                {
                                    <td class=@GlobalVariables.TableCellDataClass width="@(ColWidth==null ? 0 : ColWidth[property.Name]+"%")" style="word-break:break-word;">
                                        <input class="@GlobalVariables.NumberClass" aria-labelledby="@property.Name" onkeypress='return ((event.charCode !=8 && event.charCode ==0) || (event.charCode == 46 && this.value.split(".").length==1 )|| (event.charCode>= 48 && event.charCode <= 57 )) ' value="@(((decimal?)property.GetValue(item))?.ToString())" @oninput="@(e => UpdateModel(property, e.Value,item))" pattern="^\d*(\.\d{0,2})?$" step="0.01"/>
                                    </td>
                                }
                                else if (property.PropertyType == typeof(DateTime) || property.PropertyType == typeof(DateTime?))
                                {
                                    <td class=@GlobalVariables.TableCellDataClass width="@(ColWidth==null ? 0 : ColWidth[property.Name]+"%")" style="word-break:break-word;">
                                            <input class="@GlobalVariables.DateTimeClass" aria-labelledby="@property.Name" type="date" value="@((property.GetValue(item) == null) ? null : DateTime.Parse(property.GetValue(item)?.ToString()).ToString("yyyy-MM-dd"))" @oninput="@(e=> UpdateModel(property,e.Value ==null || e.Value.ToString() =="" ?null : DateTime.Parse(e.Value.ToString()).ToString("yyyy-MM-dd"),item))" />
                                    </td>
                                }
                                else if (property.PropertyType == typeof(bool) || property.PropertyType == typeof(bool?))
                                {
                                    <td class=@GlobalVariables.TableCellDataClass width="@(ColWidth==null ? 0 : ColWidth[property.Name]+"%")" style="word-break:break-word;">
                                        <input class=@GlobalVariables.CheckboxClass aria-labelledby="@property.Name" type="checkbox" checked="@(bool.Parse(property.GetValue(item)?.ToString()))" @oninput="@(e => UpdateModel(property, e.Value,item))" />
                                    </td>
                                }
                                else if (property.PropertyType == typeof(string))
                                {
                                    <td class=@GlobalVariables.TableCellDataClass width="@(ColWidth==null ? 0 : ColWidth[property.Name]+"%")" style="word-break:break-word;">
                                        <input class="form-control text-center" aria-labelledby="@property.Name" type="text" value="@property.GetValue(item)?.ToString()" @oninput="@(e => UpdateModel(property, e.Value,item))" />
                                    </td>
                                }
                            }
                        }
                    }
                    <td class=@GlobalVariables.TableCellDataClass width="2%"><button @onclick="()=>btnDeleteRow(item)"><i><img src="/img/bin1.png" /></i></button></td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="d-flex flex-row flex-nowrap">
   @*  <div class="p-2">
        <p class="fw-bold d-inline" style="color: #0c5baa">@glocalizer["Page"] @currentPage @glocalizer["Of"] @totalPages (@Items.Count()) @glocalizer["Item"]</p>
    </div> 
    <div class="p-2">
        @* <p class="fw-bold d-inline" style="color: #0c5baa">@glocalizer["ItemPerPage"]</p> 
        <input type="number" class="small  d-inline" @bind="itemsPerPage" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
    </div> *@

    @if (Items.Count > 5)
    {
        <div class=" d-flex flex-row flex-nowrap  p-2">

            <select class=@GlobalVariables.ComboboxClass @onchange="(e)=>ChangeItemsPerPage(e)" value="@itemsPerPage">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="20">20</option>
                <option value="25">25</option>
                <option value="7000">7000</option>
            </select>

            <ul class="pagination mb-0">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="FirstPage">&laquo;</button>
                </li>
                <li class="page-item @(currentPage == 1 ? "disabled" : ""   )">
                    <button class="page-link" @onclick="PreviousPage"> &lsaquo;</button>
                </li>
                @for (var i = 1; i <= totalPages; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">@i</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">&rsaquo;</button>
                </li>
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="LastPage">&raquo;</button>
                </li>
            </ul>
        </div>
    }
    
    <div class=" d-flex flex-row flex-nowrap ms-lg-auto p-2">
        <button class="btn-sm btn-outline-primary " @onclick="AddRow">AddRow</button>
    </div>
</div>
